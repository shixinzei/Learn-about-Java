1、面向对象的基本特征
封装：为了隐藏实现的细节，为了安全，使用的方便
继承：（1）代码的复用：父类有的，子类不需要重新再写一遍，继承过来就可以用
	  （2）代码的扩展：子类可以扩展父类的功能
	  （3）可以表示类与类之间is-a的关系
多态：使得代码的编写更灵活，功能更丰富

封装：对属性加private
封装延伸：
	（1）把一个功能封装为一个独立的方法
			Math.sqrt(x)
	（2）把一个事物的特征封装在一个类中
	（3）把一组功能封装为一个组件
			后面
	（4）把一系列的功能封装为一个系统

多态：使得代码的编写更灵活，功能更丰富
	（1）重载与重写
	
	
2、继承的语法格式，继承的特点
继承的语法格式：
	[修饰符] class 子类名 extends 父类名{
	}
继承的特点：
（1）子类不会继承父类的构造器，但是一定会调用父类的构造器
默认自动调用父类的无参构造，也可以通过super(实参列表)调用父类的有参构造；
如果父类没有无参构造，那么必须通过super(实参列表)调用父类的有参构造；

（2）子类会继承父类所有的属性和方法，但是如果在子类中不可见的属性和方法，不能在子类中直接使用
（3）子类可以扩展父类没有的属性和方法
（4）如果父类某个方法的方法体的实现不适用于子类时，子类可以对父类的方法进行重写

（5）Java只支持单继承，不支持多重继承
（6）Java支持多层继承
（7）父类可以同时拥有很多子类


3、多态的表现形式
（1）方法的重载与重写
一个功能有多种实现的形式
（2）对象的多态性
当把子类的对象赋值给父类的变量时，编译按父类的类型编译，运行时按照子类的类型运行，执行的是子类重写的方法。

出现对象的多态性的前提：（1）继承（2）重写（3）多态引用

4、Overload与Override的区别
Overload：方法的重载
Override：方法的重写

Overload：在同一个类中，出现了方法名称相同，形参列表不同的两个或多个方法构成的重载。和返回值类型无关。
Override：当父类的某个方法继承到子类后，方法体的实现不适用于子类，我们在子类中对它进行重写。
	方法 = 方法头（方法签名） + 方法体
方法头：【修饰符】 返回值类型  方法名（形参列表）
方法体：{}

方法的重写：方法名与形参列表必须相同
            返回值类型：
					基本数据类型与void，必须相同
					引用数据类型：<=
			修饰符：>=

5、请阐述向上转型与向下转型
向上转型：
	什么情况发生？在多态引用时，自动发生向上转型
向下转型：
	什么情况发生？把父类的变量 赋值给子类的变量时，就需要向下转型。
	向下转型有风险，可能发生类型转换异常ClassCastException


哪些情况类型转型会发生ClassCastException？
Father f = new Son();
（1）Son s = (Son)f;   可以转
（2）Daughter d = (Daughter)f;  会发生异常
		原因是f中存储的是Son的对象，不能转为另一个对象
（3）String str = (String)f;  会发生异常
		String和Father和Son没有继承关系，肯定不能转

SunZi extends Son ,Son extends Father
		
Father f = new SunZi();//孙子
(4)Son s = (Son)f;		可以转

通过代码避免类型转换异常，在向下转型之前可以通过instanceof进行判断。
if(对象 instanceof 需要向下转的子类类型){
	//可以转
} 